{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Whole cell myocyte action potential analysis This repository has code to perform cardiac action potential analysis. It is primarily designed to analyze spontaneous cardiac action potentials from whole-cell current-clamp recordings of cardiac myocytes . SanPy, pronounced 'senpai' This is a work in progress, do not use this code. If you find the code in this repository interesting, please email Robert Cudmore at UC Davis (rhcudmore@ucdavis.edu) and we can get you started. We are looking for users and collaborators.","title":"Home"},{"location":"#whole-cell-myocyte-action-potential-analysis","text":"This repository has code to perform cardiac action potential analysis. It is primarily designed to analyze spontaneous cardiac action potentials from whole-cell current-clamp recordings of cardiac myocytes .","title":"Whole cell myocyte action potential analysis"},{"location":"#sanpy-pronounced-senpai","text":"","title":"SanPy, pronounced 'senpai'"},{"location":"#this-is-a-work-in-progress-do-not-use-this-code","text":"If you find the code in this repository interesting, please email Robert Cudmore at UC Davis (rhcudmore@ucdavis.edu) and we can get you started. We are looking for users and collaborators.","title":"This is a work in progress, do not use this code."},{"location":"about/","text":"If you find the code in this repository interesting, please email Robert Cudmore at UC Davis (rhcudmore@ucdavis.edu) and we can get you started. We are looking for users and collaborators. Please visit the Cudmore lab website for more information","title":"About"},{"location":"api/","text":"Writing custom Python scripts In just a few lines of code, recordings can be loaded, analyzed, and plotted. See the /examples folder for examples. import matplotlib.pyplot as plt import bAnalysis import bAnalysisPlot ba = bAnalysis.bAnalysis('data/SAN-AP-example-Rs-change.abf') ba.spikeDetect() bAnalysisPlot.bPlot.plotSpikes(ba, xMin=140, xMax=145) plt.show()","title":"API"},{"location":"api/#writing-custom-python-scripts","text":"In just a few lines of code, recordings can be loaded, analyzed, and plotted. See the /examples folder for examples. import matplotlib.pyplot as plt import bAnalysis import bAnalysisPlot ba = bAnalysis.bAnalysis('data/SAN-AP-example-Rs-change.abf') ba.spikeDetect() bAnalysisPlot.bPlot.plotSpikes(ba, xMin=140, xMax=145) plt.show()","title":"Writing custom Python scripts"},{"location":"desktop-application/","text":"The desktop application allows the user to load a folder of files (top table). Selecting a file will display both the derivative and raw membrane potential (middle two traces). Spike detection is then easily performed by specifying a threshold in either the derivative of the membrane potential or the membrane potential itself. Once spikes are detected, the detection parameters are overlaid over the raw membrane and derivative traces. Finally, there is an interface (lower table and colored plot) to inspect the detection parameters.","title":"Desktop Application"},{"location":"install/","text":"SanPy will run on macOS, Microsoft Windows, or Linux. Assuming you have the following Python 3.7.x pip git (optional) Install the desktop application Option 1) Install using ./install # If you have git installed. # Clone the github repository (this will create a SanPy/ folder). git clone https://github.com/cudmore/SanPy.git # If you do not have git installed you can download the .zip file manually. # In a browser, go to 'https://github.com/cudmore/SanPy'. # Click green button 'Clone or download'. # Select 'Download ZIP'. # Once downloaded, manually extract the contents of the .zip file and continue following this tutorial. # Change into the cloned or downloaded 'SanPy/' folder. cd SanPy # Install ./install # Run ./run Option 2) Install manually # clone the github repository (this will create a SanPy/ folder) git clone https://github.com/cudmore/SanPy.git # change into the cloned SanPy folder cd SanPy # create a Python3 virtual environment in 'sanpy_env/' folder python -m venv sanpy_env # [OR] if python is bound to Python 2 (check with 'python --version') python3 -m venv sanpy_env # activate the virtual environment in sanpy_env/ source sanpy_env/bin/activate # install the package pip install . # [OR] install the required python packages (into the activated virtual environment) # pip install -r requirements.txt Running the desktop application Option 1) Using ./run cd SanPy ./run Option 2) Manually # activate the virtual environment in sanpy_env/ cd SanPy source sanpy_env/bin/activate # run the desktop application python sanpy/sanpy_app.py","title":"Install"},{"location":"install/#install-the-desktop-application","text":"","title":"Install the desktop application"},{"location":"install/#option-1-install-using-install","text":"# If you have git installed. # Clone the github repository (this will create a SanPy/ folder). git clone https://github.com/cudmore/SanPy.git # If you do not have git installed you can download the .zip file manually. # In a browser, go to 'https://github.com/cudmore/SanPy'. # Click green button 'Clone or download'. # Select 'Download ZIP'. # Once downloaded, manually extract the contents of the .zip file and continue following this tutorial. # Change into the cloned or downloaded 'SanPy/' folder. cd SanPy # Install ./install # Run ./run","title":"Option 1) Install using ./install"},{"location":"install/#option-2-install-manually","text":"# clone the github repository (this will create a SanPy/ folder) git clone https://github.com/cudmore/SanPy.git # change into the cloned SanPy folder cd SanPy # create a Python3 virtual environment in 'sanpy_env/' folder python -m venv sanpy_env # [OR] if python is bound to Python 2 (check with 'python --version') python3 -m venv sanpy_env # activate the virtual environment in sanpy_env/ source sanpy_env/bin/activate # install the package pip install . # [OR] install the required python packages (into the activated virtual environment) # pip install -r requirements.txt","title":"Option 2) Install manually"},{"location":"install/#running-the-desktop-application","text":"","title":"Running the desktop application"},{"location":"install/#option-1-using-run","text":"cd SanPy ./run","title":"Option 1) Using ./run"},{"location":"install/#option-2-manually","text":"# activate the virtual environment in sanpy_env/ cd SanPy source sanpy_env/bin/activate # run the desktop application python sanpy/sanpy_app.py","title":"Option 2) Manually"},{"location":"methods/","text":"What spike parameters are detected? We are following the cardiac myocyte nomenclature from this paper: Larson, et al (2013) Depressed pacemaker activity of sinoatrial node myocytes contributes to the age-dependent decline in maximum heart rate. PNAS 110(44):18011-18016 MDP and Vmax were defined as the most negative and positive membrane potentials, respectively Take-off potential (TOP) was defined as the membrane potential when the first derivative of voltage with respect to time (dV/dt) reached 10% of its maximum value Cycle length was defined as the interval between MDPs in successive APs The maximum rates of the AP upstroke and repolarization were taken as the maximum and minimum values of the first derivative (dV/dtmax and dV/dtmin, respectively) Action potential duration (APD) was defined as the interval between the TOP and the subsequent MDP APD_50 and APD_90 were defined as the interval between the TOP and 50% and 90% repolarization, respectively The diastolic duration was defined as the interval between MDP and TOP The early diastolic depolarization rate was estimated as the slope of a linear fit between 10% and 50% of the diastolic duration and the early diastolic duration was the corresponding time interval The nonlinear late diastolic depolarization phase was estimated as the duration between 1% and 10% dV/dt","title":"Methods"},{"location":"methods/#what-spike-parameters-are-detected","text":"We are following the cardiac myocyte nomenclature from this paper: Larson, et al (2013) Depressed pacemaker activity of sinoatrial node myocytes contributes to the age-dependent decline in maximum heart rate. PNAS 110(44):18011-18016 MDP and Vmax were defined as the most negative and positive membrane potentials, respectively Take-off potential (TOP) was defined as the membrane potential when the first derivative of voltage with respect to time (dV/dt) reached 10% of its maximum value Cycle length was defined as the interval between MDPs in successive APs The maximum rates of the AP upstroke and repolarization were taken as the maximum and minimum values of the first derivative (dV/dtmax and dV/dtmin, respectively) Action potential duration (APD) was defined as the interval between the TOP and the subsequent MDP APD_50 and APD_90 were defined as the interval between the TOP and 50% and 90% repolarization, respectively The diastolic duration was defined as the interval between MDP and TOP The early diastolic depolarization rate was estimated as the slope of a linear fit between 10% and 50% of the diastolic duration and the early diastolic duration was the corresponding time interval The nonlinear late diastolic depolarization phase was estimated as the duration between 1% and 10% dV/dt","title":"What spike parameters are detected?"},{"location":"open-source/","text":"Technologies used Backend Python Pandas NumPy pyABF - Package to open Axon Binary Format (ABF) files XlsxWriter - Desktop Application PyQt - Desktop application interface PyQtGraph - Derived from PyQt and used to make fast plots Matplotlib - Desktop application plotting Web application Plotly Python Plotly Dash - Web application interface Dash Bootstrap components Other software ParamAP - Standardized parameterization of sinoatrial node myocyte action potentials stimfit - A program for viewing and analyzing electrophysiological data C++ libraries biosig - A C/C++ library providing reading and writing routines for biosignal data formats sigviewer - SigViewer is a viewing application for biosignals.","title":"Open Source"},{"location":"open-source/#technologies-used","text":"","title":"Technologies used"},{"location":"open-source/#backend","text":"Python Pandas NumPy pyABF - Package to open Axon Binary Format (ABF) files XlsxWriter -","title":"Backend"},{"location":"open-source/#desktop-application","text":"PyQt - Desktop application interface PyQtGraph - Derived from PyQt and used to make fast plots Matplotlib - Desktop application plotting","title":"Desktop Application"},{"location":"open-source/#web-application","text":"Plotly Python Plotly Dash - Web application interface Dash Bootstrap components","title":"Web application"},{"location":"open-source/#other-software","text":"ParamAP - Standardized parameterization of sinoatrial node myocyte action potentials stimfit - A program for viewing and analyzing electrophysiological data C++ libraries biosig - A C/C++ library providing reading and writing routines for biosignal data formats sigviewer - SigViewer is a viewing application for biosignals.","title":"Other software"},{"location":"web-application/","text":"The browser based web application provides the same interface for analysis as the desktop application. Once data is analyzed, Pooling allows browsing detection parameters across any number of files. Install the web application Please note, this is experimental and does not have all functions implemented. Please use the desktop version instead. cd SanPy/dash pip install -r requirements.txt Running the web applications Run the web application to analyze raw data cd SanPy/dash python app2.py The web application for analysis is available at http://localhost:8000 Run the web application to browse and pool saved analysis cd SanPy/dash python bBrowser_app.py The web application for browsing and pooling saved analysis is available at http://localhost:8050","title":"Web Application"},{"location":"web-application/#install-the-web-application","text":"Please note, this is experimental and does not have all functions implemented. Please use the desktop version instead. cd SanPy/dash pip install -r requirements.txt","title":"Install the web application"},{"location":"web-application/#running-the-web-applications","text":"Run the web application to analyze raw data cd SanPy/dash python app2.py The web application for analysis is available at http://localhost:8000 Run the web application to browse and pool saved analysis cd SanPy/dash python bBrowser_app.py The web application for browsing and pooling saved analysis is available at http://localhost:8050","title":"Running the web applications"}]}